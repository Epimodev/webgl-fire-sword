precision highp float;

attribute vec3 position;
attribute vec2 uv;

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 modelMatrix;

uniform vec2 bendOrigin;
uniform float bendScale;
uniform float verticalBend;
uniform float horizontalBend;
uniform sampler2D trailPattern;
uniform sampler2D trailMask;
uniform sampler2D trailNoise;
uniform float patternScale;
uniform float patternOffset;
uniform float patternDeform;
uniform float maskOffset;
uniform vec3 color1;
uniform vec3 color2;
uniform vec3 color3;
uniform vec3 color4;

varying vec2 v_uv;

#include "../shaders/transforms.glslx"

export void fireVertex() {
  float yAngle = horizontalBend * uv.x;
  float zAngle = verticalBend * uv.x;
  float scaleX = 1.0 + abs(verticalBend * bendScale);
  vec3 rotationOrigin = vec3(bendOrigin, 0);

  mat4 bendMatrix = translate(rotationOrigin)
                  * rotateZ(zAngle)
                  * rotateY(yAngle)
                  * scale(vec3(scaleX, 1, 1))
                  * translate(-rotationOrigin);
  vec4 p = bendMatrix * vec4(position, 1.0);
  vec4 vertexPosition = modelMatrix * p;
  vec4 viewPosition = viewMatrix * vertexPosition;

  gl_Position = projectionMatrix * viewPosition;

  v_uv = uv;
}

export void fireFragment() {
  vec3 noise = texture2D(trailNoise, v_uv).rgb;

  vec2 patternUv = v_uv * vec2(1, patternScale) + vec2(patternOffset, 0);
  patternUv = mix(patternUv, noise.rg, patternDeform);
  vec2 maskUv = v_uv + vec2(maskOffset, 0);
  maskUv = mix(maskUv, noise.rg, 0.1);

  float firePattern = texture2D(trailPattern, patternUv).r;
  float fireMask = texture2D(trailMask, maskUv).r;

  float shape = firePattern * fireMask;

  // color ramp
  vec3 color = mix(color1, color2, smoothstep(0.0, 0.4, shape));
  color = mix(color, color3, smoothstep(0.4, 0.6, shape));
  color = mix(color, color4, smoothstep(0.6, 0.9, shape));

  float alpha = shape;

  gl_FragColor = vec4(color, alpha);
}
