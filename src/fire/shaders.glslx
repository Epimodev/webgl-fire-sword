precision highp float;

attribute vec3 position;
attribute vec2 uv;

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 modelMatrix;

uniform float u_time;
uniform vec3 u_rotationVelocity;
uniform vec2 u_bendOrigin;
uniform float u_bendScale;
uniform sampler2D u_trailPattern;
uniform sampler2D u_trailMask;
uniform sampler2D u_trailStartMask;
uniform sampler2D u_trailNoise;
uniform float u_patternScale;
uniform float u_patternSpeed;
uniform float u_patternDeform;
uniform vec3 u_color1;
uniform vec3 u_color2;
uniform vec3 u_color3;
uniform vec3 u_color4;

varying vec2 v_uv;

#include "../shaders/transforms.glslx"

export void fireVertex() {
  float verticalBend = clamp(-u_rotationVelocity.x * 0.1, -1.0, 1.0);
  float horizontalBend = clamp(-u_rotationVelocity.z * 0.15, -1.0, 1.0);

  float yAngle = horizontalBend * uv.x;
  float zAngle = verticalBend * uv.x;
  float scaleX = 1.0 + abs(verticalBend * u_bendScale);
  vec3 rotationOrigin = vec3(u_bendOrigin, 0);

  mat4 bendMatrix = translate(rotationOrigin)
                  * rotateZ(zAngle)
                  * rotateY(yAngle)
                  * scale(vec3(scaleX, 1, 1))
                  * translate(-rotationOrigin);
  vec4 p = bendMatrix * vec4(position, 1.0);
  vec4 vertexPosition = modelMatrix * p;
  vec4 viewPosition = viewMatrix * vertexPosition;

  gl_Position = projectionMatrix * viewPosition;

  v_uv = uv;
}

export void fireFragment() {
  vec3 noise = texture2D(u_trailNoise, v_uv).rgb;

  float patternOffset = -u_time * u_patternSpeed * 0.1;
  vec2 patternUv = v_uv * vec2(1, u_patternScale) + vec2(patternOffset, 0);
  patternUv = mix(patternUv, noise.rg, u_patternDeform);
  float maskOffset = clamp(1.0 - u_rotationVelocity.x * 0.1, 0.0, 0.7);
  vec2 maskUv = v_uv + vec2(maskOffset, 0);
  maskUv = mix(maskUv, noise.rg, 0.1);

  float firePattern = texture2D(u_trailPattern, patternUv).r;
  float fireMask = texture2D(u_trailMask, maskUv).r;
  float startMask = texture2D(u_trailStartMask, v_uv).r;

  float shape = firePattern * fireMask * startMask;

  // color ramp
  vec3 color = mix(u_color1, u_color2, smoothstep(0.0, 0.432, shape));
  color = mix(color, u_color3, smoothstep(0.432, 0.709, shape));
  color = mix(color, u_color4, smoothstep(0.709, 0.873, shape));

  float alpha = shape;

  gl_FragColor = vec4(color, alpha);
}
